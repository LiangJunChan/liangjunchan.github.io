import{_ as e,o as t,c as p,b as n,d as o,e as s,a as l,r as c}from"./app.2323e4f1.js";var i="/assets/141.1cb7f72b.png";const u={},r={id:"_141-\u73AF\u5F62\u94FE\u8868",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_141-\u73AF\u5F62\u94FE\u8868","aria-hidden":"true"},"#",-1),k=s(),v={href:"https://leetcode-cn.com/problems/linked-list-cycle",target:"_blank",rel:"noopener noreferrer"},m=s("141-\u73AF\u5F62\u94FE\u8868"),b=l('<blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u94FE\u8868\uFF0C\u5224\u65AD\u94FE\u8868\u4E2D\u662F\u5426\u6709\u73AF\u3002</p><p>\u5982\u679C\u94FE\u8868\u4E2D\u6709\u67D0\u4E2A\u8282\u70B9\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8FDE\u7EED\u8DDF\u8E2A next \u6307\u9488\u518D\u6B21\u5230\u8FBE\uFF0C\u5219\u94FE\u8868\u4E2D\u5B58\u5728\u73AF\u3002 \u4E3A\u4E86\u8868\u793A\u7ED9\u5B9A\u94FE\u8868\u4E2D\u7684\u73AF\uFF0C\u6211\u4EEC\u4F7F\u7528\u6574\u6570 pos \u6765\u8868\u793A\u94FE\u8868\u5C3E\u8FDE\u63A5\u5230\u94FE\u8868\u4E2D\u7684\u4F4D\u7F6E\uFF08\u7D22\u5F15\u4ECE 0 \u5F00\u59CB\uFF09\u3002 \u5982\u679C pos \u662F -1\uFF0C\u5219\u5728\u8BE5\u94FE\u8868\u4E2D\u6CA1\u6709\u73AF\u3002\u6CE8\u610F\uFF1Apos \u4E0D\u4F5C\u4E3A\u53C2\u6570\u8FDB\u884C\u4F20\u9012\uFF0C\u4EC5\u4EC5\u662F\u4E3A\u4E86\u6807\u8BC6\u94FE\u8868\u7684\u5B9E\u9645\u60C5\u51B5\u3002</p><p>\u5982\u679C\u94FE\u8868\u4E2D\u5B58\u5728\u73AF\uFF0C\u5219\u8FD4\u56DE true \u3002 \u5426\u5219\uFF0C\u8FD4\u56DE false \u3002</p><p>\u8FDB\u9636\uFF1A</p><p>\u4F60\u80FD\u7528 O(1)\uFF08\u5373\uFF0C\u5E38\u91CF\uFF09\u5185\u5B58\u89E3\u51B3\u6B64\u95EE\u9898\u5417\uFF1F</p></blockquote><img src="'+i+`" alt="image" style="width:50%;"><h2 id="\u66B4\u529B\u89E3\u6CD5-\u4EC5\u7528\u4E8Eleetcode\u505A\u9898" tabindex="-1"><a class="header-anchor" href="#\u66B4\u529B\u89E3\u6CD5-\u4EC5\u7528\u4E8Eleetcode\u505A\u9898" aria-hidden="true">#</a> \u66B4\u529B\u89E3\u6CD5\uFF08\u4EC5\u7528\u4E8Eleetcode\u505A\u9898\uFF09</h2><p>\u8BBE\u5B9A\u4E00\u4E2A\u65F6\u95F4\uFF0C\u6BD4\u5982\u57280.5s\u5185\uFF0C\u5982\u679C\u4E00\u4E2A\u4E2A\u627E\u4E0B\u53BB\u6CA1\u6709\u9047\u5230\u7A7A\uFF0C\u5219\u4E0D\u662F\u73AF</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * function ListNode(val) <span class="token punctuation">{</span>
 *     this.val = val;
 *     this.next = null;
 * <span class="token punctuation">}</span>
 */</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">head</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time <span class="token operator">===</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-map" tabindex="-1"><a class="header-anchor" href="#set-map" aria-hidden="true">#</a> Set/Map</h2><p>\u7528\u4E00\u4E2ASet\u6216\u8005Map\u6BCF\u8D70\u4E00\u6B65\u4F5C\u8BB0\u5F55,\u8D70\u5230\u6700\u540E\u5982\u679C\u8BB0\u5F55\u4E2D\u6CA1\u6709\uFF0C\u5219false\uFF0C\u6709\u7684\u8BDD\u5219true</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
    head <span class="token operator">=</span> head<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5FEB\u6162\u6307\u9488-\u9F9F\u5154\u8D5B\u8DD1" tabindex="-1"><a class="header-anchor" href="#\u5FEB\u6162\u6307\u9488-\u9F9F\u5154\u8D5B\u8DD1" aria-hidden="true">#</a> \u5FEB\u6162\u6307\u9488\uFF08\u9F9F\u5154\u8D5B\u8DD1\uFF09</h2><p>\u7B2C\u4E00\u6B21\u505A\u7684\u8BDD\u4F30\u8BA1\u5927\u90E8\u5206\u4EBA\u90FD\u4E0D\u4F1A\u60F3\u5230\u8FD9\u4E2A\u529E\u6CD5\uFF0C\u4F46\u6211\u4EEC\u53EF\u4EE5\u7AD9\u5728\u5DE8\u4EBA\u7684\u80A9\u8180\u4E0A\uFF0C\u5B66\u4E60\u4ED6\u4EEC\u7684\u601D\u8DEF\u3002\u65B9\u6CD5\u662F\uFF1A</p><ol><li>\u5047\u5B9A\u4E00\u4E2A\u5FEB\u6307\u9488\u548C\u6162\u6307\u9488\u6700\u5F00\u59CB\u90FD\u6307\u5411\u5934</li><li>\u884C\u52A8\u6162\u6307\u9488\u90FD\u8D70\u4E00\u6B65\uFF0C\u5FEB\u6307\u9488\u8D70\u4E24\u6B65</li><li>\u5224\u65AD\u4E24\u4E2A\u6307\u9488\u662F\u5426\u76F8\u9047</li><li>\u91CD\u590D23\u6B65\u9AA4\uFF0C\u5F53\u8D70\u5230\u5934\u90FD\u6CA1\u76F8\u9047\u8FD4\u56DEfalse</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> head
  <span class="token keyword">let</span> slow <span class="token operator">=</span> head
  <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">&amp;&amp;</span> fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode(object):</span>
<span class="token comment">#     def __init__(self, x):</span>
<span class="token comment">#         self.val = x</span>
<span class="token comment">#         self.next = None</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type head: ListNode
        :rtype: bool
        &quot;&quot;&quot;</span>
        slow <span class="token operator">=</span> fast <span class="token operator">=</span> head
        <span class="token keyword">while</span> slow <span class="token keyword">and</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
          slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
          fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
          <span class="token keyword">if</span> slow <span class="token operator">==</span> fast<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function h(f,w){const a=c("ExternalLinkIcon");return t(),p("div",null,[n("h1",r,[d,k,n("a",v,[m,o(a)])]),b])}var _=e(u,[["render",h],["__file","141-\u73AF\u5F62\u94FE\u8868.html.vue"]]);export{_ as default};
