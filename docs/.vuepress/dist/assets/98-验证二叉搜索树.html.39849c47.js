import{_ as e,r as t,o as p,c as o,b as n,e as c,d as s,a as i}from"./app.0b77f485.js";const l={},u={id:"_98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#_98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811","aria-hidden":"true"},"#",-1),d=s(),k={href:"https://leetcode-cn.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},v=s("98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811"),m=i(`<blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811\uFF0C\u5224\u65AD\u5176\u662F\u5426\u662F\u4E00\u4E2A\u6709\u6548\u7684\u4E8C\u53C9\u641C\u7D22\u6811\u3002</p><p>\u5047\u8BBE\u4E00\u4E2A\u4E8C\u53C9\u641C\u7D22\u6811\u5177\u6709\u5982\u4E0B\u7279\u5F81\uFF1A</p><p>\u8282\u70B9\u7684\u5DE6\u5B50\u6811\u53EA\u5305\u542B\u5C0F\u4E8E\u5F53\u524D\u8282\u70B9\u7684\u6570\u3002 \u8282\u70B9\u7684\u53F3\u5B50\u6811\u53EA\u5305\u542B\u5927\u4E8E\u5F53\u524D\u8282\u70B9\u7684\u6570\u3002 \u6240\u6709\u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\u81EA\u8EAB\u5FC5\u987B\u4E5F\u662F\u4E8C\u53C9\u641C\u7D22\u6811\u3002</p><p><strong>\u793A\u4F8B 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165:
 2
/ \\
   1   3
   \u8F93\u51FA: true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u793A\u4F8B 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165:
 5
/ \\
   1   4
        / \\
      3   6
\u8F93\u51FA: false
\u89E3\u91CA: \u8F93\u5165\u4E3A: [5,1,4,null,null,3,6]\u3002
     \u6839\u8282\u70B9\u7684\u503C\u4E3A 5 \uFF0C\u4F46\u662F\u5176\u53F3\u5B50\u8282\u70B9\u503C\u4E3A 4 \u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="\u65B9\u6CD5\u4E00-\u4E2D\u5E8F\u904D\u5386\u2014\u2014o-n" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u4E00-\u4E2D\u5E8F\u904D\u5386\u2014\u2014o-n" aria-hidden="true">#</a> \u65B9\u6CD5\u4E00\uFF1A\u4E2D\u5E8F\u904D\u5386\u2014\u2014O(N)</h2><h3 id="\u5199\u6CD5\u4E00-\u7A7A\u95F4\u590D\u6742\u5EA6o-n" tabindex="-1"><a class="header-anchor" href="#\u5199\u6CD5\u4E00-\u7A7A\u95F4\u590D\u6742\u5EA6o-n" aria-hidden="true">#</a> \u5199\u6CD5\u4E00\uFF1A\u7A7A\u95F4\u590D\u6742\u5EA6O(N)</h3><p>\u7531\u4E8E\u4E8C\u53C9\u641C\u7D22\u6811\u5177\u6709\u7279\u6027\uFF1A\u6240\u6709\u8282\u70B9\u7684\u5DE6\u5B50\u6811\u90FD\u5C0F\u4E8E\u8BE5\u8282\u70B9\uFF0C\u6240\u6709\u8282\u70B9\u7684\u53F3\u5B50\u6811\u90FD\u5927\u4E8E\u8BE5\u8282\u70B9\u3002\u56E0\u6B64\u4E8C\u53C9\u641C\u7D22\u6811\u7684\u4E2D\u5E8F\u904D\u5386\u662F\u5355\u8C03\u9012\u589E\u7684\u3002\u53EA\u9700\u8981\u68C0\u67E5\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\u662F\u5426\u6EE1\u8DB3\u5373\u53EF\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
  <span class="token keyword">let</span> flat <span class="token operator">=</span> <span class="token boolean">true</span>
  res<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> pre<span class="token punctuation">)</span> flat <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">return</span> cur
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> flat
  <span class="token keyword">function</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u8FF0\u5199\u6CD5\u7531\u4E8E\u4F7F\u7528\u4E86\u4E00\u4E2A\u6570\u7EC4\u6765\u8BB0\u5F55\u4E2D\u5E8F\u904D\u5386\u7684\u7ED3\u679C\uFF0C\u56E0\u6B64\u4F7F\u7528\u4E86\u989D\u5916\u7684\u7A7A\u95F4\uFF0C\u7A7A\u95F4\u590D\u6742\u5EA6\u2014\u2014O(N)\uFF0C\u53EF\u4EE5\u4F18\u5316\u4E00\u4E0B\u4F7F\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(1)\u5373\u4E0D\u4F7F\u7528\u989D\u5916\u7684\u7A7A\u95F4\u3002</p><h3 id="\u5199\u6CD5\u4E8C-\u7A7A\u95F4\u590D\u6742\u5EA6o-1" tabindex="-1"><a class="header-anchor" href="#\u5199\u6CD5\u4E8C-\u7A7A\u95F4\u590D\u6742\u5EA6o-1" aria-hidden="true">#</a> \u5199\u6CD5\u4E8C\uFF1A\u7A7A\u95F4\u590D\u6742\u5EA6O(1)</h3><p>\u6211\u4EEC\u5728\u4E2D\u5E8F\u904D\u5386\u7684\u65F6\u5019\uFF0C\u6BCF\u4E00\u6B21\u90FD\u5C06\u5F53\u524D\u8282\u70B9\u548C\u4E0A\u4E00\u4E2A\u8282\u70B9\u4F5C\u6BD4\u8F83\uFF0C\u5982\u679C<code>pre.val&gt;=cur.val</code>\u5219\u8FD4\u56DEfalse\uFF0C\u6700\u540E\u904D\u5386\u5B8C\u6BD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    pre <span class="token operator">=</span> node
    <span class="token keyword">return</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u65B9\u6CD5\u4E8C-\u9012\u5F52\u2014\u2014o-n" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u4E8C-\u9012\u5F52\u2014\u2014o-n" aria-hidden="true">#</a> \u65B9\u6CD5\u4E8C\uFF1A\u9012\u5F52\u2014\u2014O(N)</h2><p>\u65B9\u6CD5\u662F\uFF0C\u9012\u5F52\u7684\u65F6\u5019\u643A\u5E26\u4E00\u4E2A\u6700\u5927\u503Cmax\u548C\u6700\u5C0F\u503Cmin\uFF0C\u5F53\u9012\u5F52\u5DE6\u5B50\u6811\u7684\u65F6\u5019\uFF0C\u7531\u4E8E\u5DE6\u5B50\u6811\u90FD\u6BD4\u6839\u8282\u70B9\u5C0F\uFF0C\u6240\u4EE5\u6B64\u65F6max\u4E0D\u80FD\u5927\u4E8E\u6839\u8282\u70B9\u3002</p><p>\u9012\u5F52\u53F3\u5B50\u6811\u7684\u65F6\u5019\uFF0C\u7531\u4E8E\u53F3\u5B50\u6811\u90FD\u6BD4\u6839\u8282\u70B9\u8981\u5927\uFF0C\u6240\u4EE5\u6B64\u65F6min\u4E0D\u80FD\u5C0F\u4E8E\u6839\u8282\u70B9\u3002</p><p>\u7531\u6B64\u4E5F\u5C31\u786E\u5B9A\u4E86\u6BCF\u6B21\u9012\u5F52\u65F6\u5019\u7684max\u548Cmin\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isValid</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> <span class="token number">Infinity</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">return</span> <span class="token function">isValid</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValid</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> max<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u65B9\u6CD5\u4E8C\u7684\u7B80\u6D01\u5199\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u4E8C\u7684\u7B80\u6D01\u5199\u6CD5" aria-hidden="true">#</a> \u65B9\u6CD5\u4E8C\u7684\u7B80\u6D01\u5199\u6CD5</h2><p>\u867D\u7136leetcode\u9ED8\u8BA4\u4EE3\u7801\u51FD\u6570\u7684\u53C2\u6570\u53EA\u6709\u4E00\u4E2Aroot\uFF0C\u4E0D\u8FC7\u6211\u4EEC\u53EF\u4EE5\u5229\u7528\u51FD\u6570\u53C2\u6570\u9ED8\u8BA4\u503C\u7684\u5199\u6CD5\uFF0C\u624B\u52A8\u589E\u52A0\u5230\u4E09\u4E2A\u53C2\u6570\uFF0C\u90A3\u6837\u7684\u8BDD\u8FD9\u9053\u9898\u53EF\u4EE5\u4E09\u884C\u89E3\u51B3\u8FD9\u9053\u9898\u4E86</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>min<span class="token operator">=</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token number">Infinity</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">&gt;=</span>root<span class="token punctuation">.</span>val<span class="token operator">||</span>max<span class="token operator">&lt;=</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>min<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span>max<span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function b(f,h){const a=t("ExternalLinkIcon");return p(),o("div",null,[n("h1",u,[r,d,n("a",k,[v,c(a)])]),m])}const g=e(l,[["render",b],["__file","98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811.html.vue"]]);export{g as default};
