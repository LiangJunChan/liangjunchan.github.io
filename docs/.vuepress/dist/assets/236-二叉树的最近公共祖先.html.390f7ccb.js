import{_ as t,r as o,o as p,c as l,b as n,d as c,e as a,a as i}from"./app.9c021dc2.js";const s="/assets/236.feae7982.png",r={},d={id:"_236-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#_236-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148","aria-hidden":"true"},"#",-1),k=a(),v={href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},m=a("236. \u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148"),b=i('<blockquote><p>\u7ED9\u5B9A\u4E00\u4E2A\u4E8C\u53C9\u6811, \u627E\u5230\u8BE5\u6811\u4E2D\u4E24\u4E2A\u6307\u5B9A\u8282\u70B9\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u3002</p><p>\u767E\u5EA6\u767E\u79D1\u4E2D\u6700\u8FD1\u516C\u5171\u7956\u5148\u7684\u5B9A\u4E49\u4E3A\uFF1A\u201C\u5BF9\u4E8E\u6709\u6839\u6811 T \u7684\u4E24\u4E2A\u8282\u70B9 p\u3001q\uFF0C\u6700\u8FD1\u516C\u5171\u7956\u5148\u8868\u793A\u4E3A\u4E00\u4E2A\u8282\u70B9 x\uFF0C\u6EE1\u8DB3 x \u662F p\u3001q \u7684\u7956\u5148\u4E14 x \u7684\u6DF1\u5EA6\u5C3D\u53EF\u80FD\u5927\uFF08\u4E00\u4E2A\u8282\u70B9\u4E5F\u53EF\u4EE5\u662F\u5B83\u81EA\u5DF1\u7684\u7956\u5148\uFF09\u3002\u201D</p><p>\u793A\u4F8B 1\uFF1A</p><p><img src="'+s+`" alt="img"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aroot = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
\u8F93\u51FA\uFF1A3
\u89E3\u91CA\uFF1A\u8282\u70B9 5 \u548C\u8282\u70B9 1 \u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u662F\u8282\u70B9 3 \u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u793A\u4F8B 2\uFF1A</p><p><img src="`+s+`" alt="img"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aroot = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
\u8F93\u51FA\uFF1A5
\u89E3\u91CA\uFF1A\u8282\u70B9 5 \u548C\u8282\u70B9 4 \u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u662F\u8282\u70B9 5 \u3002\u56E0\u4E3A\u6839\u636E\u5B9A\u4E49\u6700\u8FD1\u516C\u5171\u7956\u5148\u8282\u70B9\u53EF\u4EE5\u4E3A\u8282\u70B9\u672C\u8EAB\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u89E3\u91CA\uFF1A\u8282\u70B9 5 \u548C\u8282\u70B9 4 \u7684\u6700\u8FD1\u516C\u5171\u7956\u5148\u662F\u8282\u70B9 5 \u3002\u56E0\u4E3A\u6839\u636E\u5B9A\u4E49\u6700\u8FD1\u516C\u5171\u7956\u5148\u8282\u70B9\u53EF\u4EE5\u4E3A\u8282\u70B9\u672C\u8EAB\u3002 \u793A\u4F8B 3\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aroot = [1,2], p = 1, q = 2
\u8F93\u51FA\uFF1A1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63D0\u793A\uFF1A</p><p>\u6811\u4E2D\u8282\u70B9\u6570\u76EE\u5728\u8303\u56F4 [2, 105] \u5185\u3002 -109 &lt;= Node.val &lt;= 109 \u6240\u6709 Node.val \u4E92\u4E0D\u76F8\u540C \u3002 p != q p \u548C q \u5747\u5B58\u5728\u4E8E\u7ED9\u5B9A\u7684\u4E8C\u53C9\u6811\u4E2D\u3002</p></blockquote><h2 id="\u9012\u5F52\u2014\u2014o-n" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u2014\u2014o-n" aria-hidden="true">#</a> \u9012\u5F52\u2014\u2014O(N)</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val) <span class="token punctuation">{</span>
 *     this.val = val;
 *     this.left = this.right = null;
 * <span class="token punctuation">}</span>
 */</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">p</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">q</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>  p <span class="token operator">===</span> root <span class="token operator">||</span> q <span class="token operator">===</span> root<span class="token punctuation">)</span> <span class="token keyword">return</span> root
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>
  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>
  <span class="token keyword">return</span> left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> right <span class="token operator">:</span> right <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> left <span class="token operator">:</span> root
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function _(h,f){const e=o("ExternalLinkIcon");return p(),l("div",null,[n("h1",d,[u,k,n("a",v,[m,c(e)])]),b])}const x=t(r,[["render",_],["__file","236-\u4E8C\u53C9\u6811\u7684\u6700\u8FD1\u516C\u5171\u7956\u5148.html.vue"]]);export{x as default};
